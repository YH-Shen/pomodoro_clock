{"version":3,"sources":["components/Counter.js","components/Clock.js","components/Music.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","minus_button_id","plus_button_id","time_id","title","className","id","updatecount","onClick","icon","time","Clock","loop","sessionCount","breakCount","handleClearCount","onClearCount","useState","isPlaying","updateIsPlaying","timeCount","updateTimeCount","currentTimer","updateCurrentTimer","clickReset","updateClickReset","musicPlayPause","status","beep","document","getElementById","play","pause","useEffect","returningCallback","clearInterval","setInterval","t","minutes","Math","floor","seconds","convertToTime","console","log","Music","src","library","add","faMinus","faPlus","faPlay","faPause","faSyncAlt","App","updateBreakCount","updateSessionCount","handleClick","e","update","target","getAttribute","operand","breakProps","sessionProps","clockProps","currentSession","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+TA0DeA,G,MApDC,SAACC,GAQb,IAAIC,EACAC,EACAC,EAUJ,MAToB,iBAAhBH,EAAMI,OACNH,EAAkB,kBAClBC,EAAiB,kBACjBC,EAAU,iBAEVF,EAAkB,oBAClBC,EAAiB,oBACjBC,EAAU,kBAGV,yBAAKE,UAAU,mBACX,4BAAKL,EAAMI,OACX,yBAAKC,UAAU,YACX,4BACIC,GAAIL,EACJG,MAAOJ,EAAMI,MACbG,YAAY,QACZC,QAASR,EAAMQ,SAEf,kBAAC,IAAD,CACIH,UAAU,eACVI,KAAK,WAGb,0BAAMH,GAAIH,GAAUH,EAAMU,MAC1B,4BACIJ,GAAIJ,EACJE,MAAOJ,EAAMI,MACbG,YAAY,OACZC,QAASR,EAAMQ,SAEf,kBAAC,IAAD,CACIH,UAAU,eACVI,KAAK,cCkGdE,G,MA/ID,SAACX,GAAU,IAgBjBY,EAZIC,EAA6Bb,EAA7Ba,aAAcC,EAAed,EAAfc,WAChBC,EAAmBf,EAAMgB,aALV,EASgBC,oBAAS,GATzB,mBASdC,EATc,KASHC,EATG,OAUgBF,mBAHZ,GAIrBJ,GAXiB,mBAUdO,EAVc,KAUHC,EAVG,OAasBJ,mBAAS,WAb/B,mBAadK,EAbc,KAaAC,EAbA,OAckBN,oBAAS,GAd3B,mBAcdO,EAdc,KAcFC,EAdE,KA+BfC,EAAiB,SAACC,GACpB,IAAIC,EAAOC,SAASC,eAAe,SACnC,MAAe,SAAXH,EAA0BC,EAAKG,QAEnCH,EAAKN,aAAe,EACbM,EAAKI,UAOhBC,qBAAU,WACN,IAAMC,EAAoB,WACtBC,cAAcvB,IAGlB,OAAKM,GAMyB,IAAdE,GAEZG,EACqB,YAAjBD,EAA6B,QAAU,WAE3CD,EACqB,YAAjBC,EArDa,GAsDPR,EAtDO,GAuDPD,GAGVa,EAAe,SAGfd,EAAOwB,aAAY,WAEff,GAAgB,SAACgB,GAAD,OAAOA,EAAI,OAC5B,KAEAH,IAxBHC,cAAcvB,GACPsB,KAwBZ,CAAChB,EAAWE,IAEfa,qBAAU,WACNZ,EAtEqB,GAsELR,KACjB,CAACA,IAEJoB,qBAAU,WAKN,IAAmB,IAAfT,EAMA,OAJAW,cAAcvB,GAGda,GAAkBD,GATI,WACtBW,cAAcvB,MAWnB,CAACY,IA0BJ,OACI,yBAAKnB,UAAU,mBACX,wBAAIC,GAAG,eAAegB,GACtB,0BAAMhB,GAAG,aArGK,SAACc,GAGnB,IAAIkB,EAAUC,KAAKC,MAAMpB,EAjBJ,IAkBjBqB,EAAUrB,EAlBO,GAqBrB,OAFAqB,EAAUA,EAAU,EAAIA,EAAU,IAAMA,EAElC,GAAN,OAAUH,EAAV,YAAqBG,GA8FKC,CAActB,IAEpC,yBAAKf,UAAU,YACX,4BAAQC,GAAG,aAAaE,QA9BZ,WAGpBmC,QAAQC,IAAItB,GAEZH,GAAiBD,KA0BL,kBAAC,IAAD,CACIb,UAAU,eACVI,KAAMS,EAAY,QAAU,UAIpC,4BAAQZ,GAAG,QAAQE,QA7BX,WAIhBa,EACqB,YAAjBC,EACM,KACA,KAGVI,EAAe,SACfD,GAAkBD,GAClBL,GAAiBD,GACjBH,MAiBY,kBAAC,IAAD,CACIV,UAAU,eACVI,KAAK,kBChHdoC,EA1BD,SAAClB,GAkBX,OACI,2BACIrB,GAAG,QACHwC,IAAI,4F,MCLhBC,IAAQC,IAAIC,IAASC,IAAQC,IAAQC,IAASC,KA8E/BC,MA5Ef,WAAe,MAE4BrC,mBAAS,GAFrC,mBAEJH,EAFI,KAEQyC,EAFR,OAGgCtC,mBAAS,IAHzC,mBAGJJ,EAHI,KAGU2C,EAHV,OAMYvC,mBAAS,WAAzBK,EANI,oBAYLmC,EAAc,SAACC,GAGjB,IAAIC,EAASD,EAAEE,OAAOC,aAAa,eAC/BzD,EAAQsD,EAAEE,OAAOC,aAAa,SAG9BC,EAAqB,SAAXH,EAAoB,GAAK,GAGxB,iBAAVvD,GACIU,EAAagD,IAAY,GACtBhD,EAAagD,IAAY,MACtB,mBAAV1D,GACIS,EAAeiD,IAAY,GACxBjD,EAAeiD,IAAY,MAI7B,iBAAV1D,EACMmD,EAAiBzC,EAAagD,GAC9BN,EAAmB3C,EAAeiD,KAGtCC,EAAa,CACf3D,MAAO,eACPM,KAAMI,EACNN,QAASiD,GAEPO,EAAe,CACjB5D,MAAO,iBACPM,KAAMG,EACNL,QAASiD,GAEPQ,EAAa,CACfvD,KAAM,GACNwD,eAAgB5C,EAChBJ,WAAW,EACXJ,WAAYA,EACZD,aAAcA,EACdG,aA7CqB,WACrBuC,EAAiB,GACjBC,EAAmB,MA+CvB,OACI,yBAAKnD,UAAU,OACX,8CAEA,yBAAKA,UAAU,YACX,yBAAKC,GAAG,eACHP,EAAQ,eAAKgE,KAElB,yBAAKzD,GAAG,iBACHP,EAAQ,eAAKiE,MAGrBnB,IACD,yBAAKxC,UAAU,SAASM,EAAM,eAAKsD,OC7E3BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJ7C,SAASC,eAAe,SDyHtB,kBAAmB6C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.f5faee88.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport \"../static/Counter.css\";\r\n\r\nconst Counter = (props) => {\r\n    // static methods\r\n    // const handleBreakDecrease = () => {\r\n    //     updateBreakCount(props.time - 1);\r\n    // };\r\n    // const handleBreakIncrease = () => {\r\n    //     updateBreakCount(props.time + 1);\r\n    // };\r\n    let minus_button_id;\r\n    let plus_button_id;\r\n    let time_id;\r\n    if (props.title === \"Break Length\") {\r\n        minus_button_id = \"break-decrement\";\r\n        plus_button_id = \"break-increment\";\r\n        time_id = \"break-length\";\r\n    } else {\r\n        minus_button_id = \"session-decrement\";\r\n        plus_button_id = \"session-increment\";\r\n        time_id = \"session-length\";\r\n    }\r\n    return (\r\n        <div className=\"timer-container\">\r\n            <h3>{props.title}</h3>\r\n            <div className=\"controls\">\r\n                <button\r\n                    id={minus_button_id}\r\n                    title={props.title}\r\n                    updatecount=\"minus\"\r\n                    onClick={props.onClick}\r\n                >\r\n                    <FontAwesomeIcon\r\n                        className=\"control-icon\"\r\n                        icon=\"minus\"\r\n                    />\r\n                </button>\r\n                <span id={time_id}>{props.time}</span>\r\n                <button\r\n                    id={plus_button_id}\r\n                    title={props.title}\r\n                    updatecount=\"plus\"\r\n                    onClick={props.onClick}\r\n                >\r\n                    <FontAwesomeIcon\r\n                        className=\"control-icon\"\r\n                        icon=\"plus\"\r\n                    />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport \"../static/Clock.css\";\r\n\r\nconst Clock = (props) => {\r\n    // ==============================================================\r\n    //  initialization\r\n    // ==============================================================\r\n    const { sessionCount, breakCount } = props;\r\n    const handleClearCount = props.onClearCount;\r\n\r\n    const secondsInAMinute = 60;\r\n\r\n    const [isPlaying, updateIsPlaying] = useState(false);\r\n    const [timeCount, updateTimeCount] = useState(\r\n        sessionCount * secondsInAMinute\r\n    );\r\n    const [currentTimer, updateCurrentTimer] = useState(\"Session\");\r\n    const [clickReset, updateClickReset] = useState(false);\r\n\r\n    let loop;\r\n    // ==============================================================\r\n    //  helpers\r\n    // ==============================================================\r\n\r\n    const convertToTime = (timeCount) => {\r\n        // take the time count (25*secondsInAMinute)\r\n        // convert to minutes and seconds\r\n        let minutes = Math.floor(timeCount / secondsInAMinute);\r\n        let seconds = timeCount % secondsInAMinute;\r\n        seconds = seconds > 9 ? seconds : \"0\" + seconds;\r\n        // console.log(`${minutes}:${seconds}`);\r\n        return `${minutes}:${seconds}`;\r\n    };\r\n\r\n    const musicPlayPause = (status) => {\r\n        let beep = document.getElementById(\"audio\");\r\n        if (status === \"play\") return beep.play();\r\n        // if reset\r\n        beep.currentTimer = 0;\r\n        return beep.pause();\r\n    };\r\n\r\n    // ==============================================================\r\n    //  hooks\r\n    // ==============================================================\r\n\r\n    useEffect(() => {\r\n        const returningCallback = () => {\r\n            clearInterval(loop);\r\n        };\r\n        // Playing\r\n        if (!isPlaying) {\r\n            clearInterval(loop);\r\n            return returningCallback;\r\n        }\r\n\r\n        // Not Playing\r\n        const timeOut = timeCount === 0;\r\n        if (timeOut) {\r\n            updateCurrentTimer(\r\n                currentTimer === \"Session\" ? \"Break\" : \"Session\"\r\n            );\r\n            updateTimeCount(\r\n                currentTimer === \"Session\"\r\n                    ? breakCount * secondsInAMinute\r\n                    : sessionCount * secondsInAMinute\r\n            );\r\n            // Music(\"play\");\r\n            musicPlayPause(\"play\");\r\n        } else {\r\n            // setInterval\r\n            loop = setInterval(() => {\r\n                // update timeCount\r\n                updateTimeCount((t) => t - 1);\r\n            }, 1000);\r\n        }\r\n        return returningCallback;\r\n    }, [isPlaying, timeCount]);\r\n\r\n    useEffect(() => {\r\n        updateTimeCount(sessionCount * secondsInAMinute);\r\n    }, [sessionCount]);\r\n\r\n    useEffect(() => {\r\n        const returningCallback = () => {\r\n            clearInterval(loop);\r\n        };\r\n        // if clicked reset button\r\n        if (clickReset === true) {\r\n            // pause timing\r\n            clearInterval(loop);\r\n            // reset the timer settings\r\n\r\n            updateClickReset(!clickReset);\r\n            return returningCallback;\r\n        }\r\n    }, [clickReset]);\r\n\r\n    const handlePlayPause = () => {\r\n        // console.log(\"play pause\");\r\n        // console.log(\"isPlaying\", isPlaying);\r\n        console.log(currentTimer);\r\n\r\n        updateIsPlaying(!isPlaying);\r\n    };\r\n\r\n    const handleReset = () => {\r\n        // reset breakcount to 5, session count to 25\r\n\r\n        //reset timer\r\n        updateTimeCount(\r\n            currentTimer === \"Session\"\r\n                ? 25 * secondsInAMinute\r\n                : 5 * secondsInAMinute\r\n        );\r\n        // pause music\r\n        musicPlayPause(\"reset\");\r\n        updateClickReset(!clickReset);\r\n        updateIsPlaying(!isPlaying);\r\n        handleClearCount();\r\n    };\r\n\r\n    return (\r\n        <div className=\"clock-container\">\r\n            <h1 id=\"timer-label\">{currentTimer}</h1>\r\n            <span id=\"time-left\">{convertToTime(timeCount)}</span>\r\n            {/* <div>{Music()}</div> */}\r\n            <div className=\"controls\">\r\n                <button id=\"start_stop\" onClick={handlePlayPause}>\r\n                    <FontAwesomeIcon\r\n                        className=\"control-icon\"\r\n                        icon={isPlaying ? \"pause\" : \"play\"}\r\n                    />\r\n                </button>\r\n\r\n                <button id=\"reset\" onClick={handleReset}>\r\n                    <FontAwesomeIcon\r\n                        className=\"control-icon\"\r\n                        icon=\"sync-alt\"\r\n                    />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Clock;\r\n","import React from \"react\";\r\n\r\nconst Music = (status) => {\r\n    // let beep = new Audio(\r\n    //     \"https://raw.githubusercontent.com/Yuhui-Shen/pomodoro_clock/master/src/static/bell.wav\"\r\n    // );\r\n\r\n    // const start = () => {\r\n\r\n    //     // let beep = document.getElementById(\"audio\");\r\n    //     // console.log(beep);\r\n    //     // beep.play();\r\n    // };\r\n\r\n    // const reset = () => {\r\n    //     console.log(\"pause\");\r\n    //     beep.pause();\r\n    //     beep.currentTime = 0;\r\n    //     console.log(\"pause\");\r\n    // };\r\n    return (\r\n        <audio\r\n            id=\"audio\"\r\n            src=\"https://raw.githubusercontent.com/Yuhui-Shen/pomodoro_clock/master/src/static/bell.wav\"\r\n        ></audio>\r\n    );\r\n};\r\n\r\nexport default Music;\r\n","import React, { useState } from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\n// import { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n    faMinus,\n    faPlus,\n    faPlay,\n    faPause,\n    faSyncAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport Counter from \"./components/Counter\";\nimport Clock from \"./components/Clock\";\nimport Music from \"./components/Music\";\n\nimport \"./App.css\";\n\nlibrary.add(faMinus, faPlus, faPlay, faPause, faSyncAlt);\n\nfunction App() {\n    // state init\n    const [breakCount, updateBreakCount] = useState(5);\n    const [sessionCount, updateSessionCount] = useState(25);\n\n    // const [clockCount, updateClockCount] = useState(25 * 60);\n    const [currentTimer] = useState(\"Session\");\n    const handleClearCount = () => {\n        updateBreakCount(5);\n        updateSessionCount(25);\n    };\n\n    const handleClick = (e) => {\n        // extract component name and button name from e: e.g.: break + plus\n\n        let update = e.target.getAttribute(\"updatecount\");\n        let title = e.target.getAttribute(\"title\");\n\n        // update breakCount or sessionCount accordingly\n        let operand = update === \"plus\" ? 1 : -1;\n        // breakCount or sessionCount cannot be below 0 or above 60\n        if (\n            (title === \"Break Length\" &&\n                (breakCount + operand === 0 ||\n                    breakCount + operand === 61)) ||\n            (title === \"Session Length\" &&\n                (sessionCount + operand === 0 ||\n                    sessionCount + operand === 61))\n        )\n            return;\n\n        title === \"Break Length\"\n            ? updateBreakCount(breakCount + operand)\n            : updateSessionCount(sessionCount + operand);\n    };\n\n    const breakProps = {\n        title: \"Break Length\",\n        time: breakCount,\n        onClick: handleClick,\n    };\n    const sessionProps = {\n        title: \"Session Length\",\n        time: sessionCount,\n        onClick: handleClick,\n    };\n    const clockProps = {\n        time: \"\",\n        currentSession: currentTimer,\n        isPlaying: false,\n        breakCount: breakCount,\n        sessionCount: sessionCount,\n        onClearCount: handleClearCount,\n        // loop: undefined,\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Pomodoro Timer</h1>\n\n            <div className=\"Counters\">\n                <div id=\"break-label\">\n                    {Counter({ ...breakProps })}\n                </div>\n                <div id=\"session-label\">\n                    {Counter({ ...sessionProps })}\n                </div>\n            </div>\n            {Music()}\n            <div className=\"Clock\">{Clock({ ...clockProps })}</div>\n\n            {/* <footer>Designed by meeeee</footer> */}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}