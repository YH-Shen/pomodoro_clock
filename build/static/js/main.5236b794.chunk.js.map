{"version":3,"sources":["redux/reducers/todos.js","redux/reducers/visibilityFilter.js","redux/reducers/index.js","redux/store.js","localStorage.js","components/Counter.js","components/Clock.js","components/Music.js","components/Header.js","redux/actions.js","components/Form.js","components/VisibilityFilters.js","redux/selectors.js","components/Todo.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["initialState","allIds","byIds","todos","state","action","type","payload","id","content","completed","filter","allId","visibilityFilter","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadFromStorageToState","store","createStore","rootReducer","composeWithDevTools","subscribe","throttle","stringify","setItem","console","error","saveToStorageFromState","getState","Counter","props","minus_button_id","plus_button_id","time_id","title","className","updatecount","onClick","icon","time","Clock","sessionCount","breakCount","handleClearCount","onClearCount","useState","isPlaying","updateIsPlaying","timeCount","updateTimeCount","currentTimer","updateCurrentTimer","clickReset","updateClickReset","loop","useRef","musicPlayPause","status","beep","document","getElementById","play","pause","useEffect","returningCallback","clearInterval","current","setInterval","t","minutes","Math","floor","seconds","convertToTime","size","log","Music","src","Header","to","addTodo","nanoid","connect","autoFocus","e","preventDefault","todo","value","test","activeFilter","setFilter","name","onChange","event","target","statusHandler","getTodosState","getTodos","getTodoList","map","getTodoById","toggleTodo","deleteTodo","allTodos","getTodosByVisibilityFilter","axios","interceptors","response","use","data","forEach","substring","Promise","reject","length","get","then","res","text","key","library","add","faMinus","faPlus","faPlay","faPause","faSyncAlt","faPlusSquare","faCheck","faTrash","faClock","faListUl","faChevronDown","App","updateBreakCount","updateSessionCount","handleClick","update","getAttribute","operand","breakProps","sessionProps","clockProps","currentSession","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5236b794.chunk.js","sourcesContent":["const initialState = {\n    allIds: [],\n    byIds: {},\n};\n\nconst todos = (state = initialState, action) => {\n    switch (action.type) {\n        case \"ADD_TODO\":\n            const { id, content } = action.payload;\n\n            return {\n                ...state,\n                allIds: [...state.allIds, id],\n                byIds: {\n                    ...state.byIds,\n                    [id]: {\n                        content,\n                        completed: false,\n                    },\n                },\n            };\n        case \"TOGGLE_TODO\": {\n            // console.log(state);\n            const { id } = action.payload;\n            return {\n                ...state,\n                byIds: {\n                    ...state.byIds,\n                    [id]: {\n                        ...state.byIds[id],\n                        completed: !state.byIds[id].completed,\n                    },\n                },\n            };\n        }\n        case \"DELETE_TODO\": {\n            // console.log(state);\n            const { id } = action.payload;\n            delete state.byIds[id];\n            return {\n                ...state,\n                allIds: [\n                    ...state.allIds.filter((allId) => allId !== id),\n                ],\n                byIds: {\n                    ...state.byIds,\n                },\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default todos;\n","const visibilityFilter = (state = \"all\", action) => {\n    // console.log(action);\n    switch (action.type) {\n        case \"SET_FILTER\": {\n            return action.payload.filter;\n        }\n        default: {\n            return state;\n        }\n    }\n};\nexport default visibilityFilter;\n// export const getTodosState = (store) => store.todos;\n\n// export const getTodoList = (store) =>\n//     getTodosState(store) ? getTodosState(store).allIds : [];\n\n// export const getTodoById = (store, id) =>\n//     getTodosState(store)\n//         ? { ...getTodosState(store).byIds[id], id }\n//         : {};\n\n// /**\n//  * example of a slightly more complex selector\n//  * select from store combining information from multiple reducers\n//  */\n// export const getTodos = (store) =>\n//     getTodoList(store).map((id) => getTodoById(store, id));\n\n// export const getTodosByVisibilityFilter = (\n//     store,\n//     visibilityFilter\n// ) => {\n//     const allTodos = getTodos(store);\n//     switch (visibilityFilter) {\n//         case \"completed\":\n//             return allTodos.filter((todo) => todo.completed);\n//         case \"uncompleted\":\n//             return allTodos.filter((todo) => !todo.completed);\n//         case \"all\":\n//         default:\n//             return allTodos;\n//     }\n// };\n","import { combineReducers } from \"redux\";\nimport todos from \"./todos\";\nimport visibilityFilter from \"./visibilityFilter\";\nexport default combineReducers({\n    todos,\n    visibilityFilter,\n});\n","// import React from \"react\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport {\n    loadFromStorageToState,\n    saveToStorageFromState,\n} from \"../localStorage\";\nimport throttle from \"lodash/throttle\";\n// const store = () => {\n//     return createStore(rootReducer);\n// };\n// const store = configureStore({ reducer: rootReducer });\nconst persistedState = loadFromStorageToState();\n\nconst store = createStore(\n    rootReducer,\n    persistedState,\n    composeWithDevTools()\n);\n\n// throttle ensures storage can only be written to once per second\nstore.subscribe(\n    throttle(() => {\n        saveToStorageFromState({\n            todos: store.getState().todos,\n        });\n    }, 1000)\n);\nexport default store;\n\n// export default store;\n","// Attempt to grab state from local storage if it exists\n// If it doesn't or there's an error, let the redux reducers handle state instead\nexport const loadFromStorageToState = () => {\n    try {\n        const serializedState = localStorage.getItem(\"state\");\n        if (serializedState === null) return undefined;\n        // console.log(JSON.parse(serializedState));\n        return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\n\n// Attempt to save state to local storage, log error if it doesn't work\nexport const saveToStorageFromState = (state) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem(\"state\", serializedState);\n        // console.log(JSON.parse(serializedState));\n    } catch (err) {\n        console.error(\"LocalStorage Error: \", err);\n    }\n};\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport \"../static/Counter.css\";\n\nconst Counter = (props) => {\n    // static methods\n    // const handleBreakDecrease = () => {\n    //     updateBreakCount(props.time - 1);\n    // };\n    // const handleBreakIncrease = () => {\n    //     updateBreakCount(props.time + 1);\n    // };\n    let minus_button_id;\n    let plus_button_id;\n    let time_id;\n    if (props.title === \"Break Length\") {\n        minus_button_id = \"break-decrement\";\n        plus_button_id = \"break-increment\";\n        time_id = \"break-length\";\n    } else {\n        minus_button_id = \"session-decrement\";\n        plus_button_id = \"session-increment\";\n        time_id = \"session-length\";\n    }\n    return (\n        <div className=\"timer-container\">\n            <h3>{props.title}</h3>\n            <div className=\"controls\">\n                <button\n                    id={minus_button_id}\n                    title={props.title}\n                    updatecount=\"minus\"\n                    onClick={props.onClick}\n                >\n                    <FontAwesomeIcon\n                        className=\"control-icon\"\n                        icon=\"minus\"\n                    />\n                </button>\n                <span id={time_id}>{props.time}</span>\n                <button\n                    id={plus_button_id}\n                    title={props.title}\n                    updatecount=\"plus\"\n                    onClick={props.onClick}\n                >\n                    <FontAwesomeIcon\n                        className=\"control-icon\"\n                        icon=\"plus\"\n                    />\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Counter;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport \"../static/Clock.css\";\n\nconst Clock = (props) => {\n    // ==============================================================\n    //  initialization\n    // ==============================================================\n    const { sessionCount, breakCount } = props;\n    const handleClearCount = props.onClearCount;\n\n    // Debug Tool=====================================================\n    const secondsInAMinute = 60;\n    // ===============================================================\n\n    const [isPlaying, updateIsPlaying] = useState(false);\n    const [timeCount, updateTimeCount] = useState(\n        sessionCount * secondsInAMinute\n    );\n    const [currentTimer, updateCurrentTimer] = useState(\"Session\");\n    const [clickReset, updateClickReset] = useState(false);\n\n    // let loop;\n    const loop = useRef(null);\n    // ==============================================================\n    //  helpers\n    // ==============================================================\n\n    const convertToTime = (timeCount) => {\n        // take the time count (25*secondsInAMinute)\n        // convert to minutes and seconds\n        let minutes = Math.floor(timeCount / secondsInAMinute);\n        let seconds = timeCount % secondsInAMinute;\n        seconds = seconds > 9 ? seconds : \"0\" + seconds;\n        // console.log(`${minutes}:${seconds}`);\n        return `${minutes}:${seconds}`;\n    };\n\n    const musicPlayPause = (status) => {\n        let beep = document.getElementById(\"audio\");\n        if (status === \"play\") return beep.play();\n        // if reset\n        beep.currentTimer = 0;\n        return beep.pause();\n    };\n\n    // ==============================================================\n    //  hooks\n    // ==============================================================\n\n    useEffect(() => {\n        const returningCallback = () => {\n            clearInterval(loop.current);\n        };\n        // Playing\n        if (!isPlaying) {\n            clearInterval(loop.current);\n            return returningCallback;\n        }\n\n        // Not Playing\n        const timeOut = timeCount === 0;\n        if (timeOut) {\n            updateCurrentTimer((currentTimer) =>\n                currentTimer === \"Session\" ? \"Break\" : \"Session\"\n            );\n            updateTimeCount(\n                currentTimer === \"Session\"\n                    ? breakCount * secondsInAMinute\n                    : sessionCount * secondsInAMinute\n            );\n            // Music(\"play\");\n            musicPlayPause(\"play\");\n        } else {\n            // setInterval\n            loop.current = setInterval(() => {\n                // update timeCount\n                updateTimeCount((t) => t - 1);\n            }, 1000);\n        }\n        return returningCallback;\n    }, [\n        isPlaying,\n        timeCount,\n        currentTimer,\n        breakCount,\n        sessionCount,\n    ]);\n\n    useEffect(() => {\n        // console.log(currentTimer);\n        if (isPlaying) return;\n        if (currentTimer === \"Session\") {\n            updateTimeCount(sessionCount * secondsInAMinute);\n        } else {\n            updateTimeCount(breakCount * secondsInAMinute);\n        }\n    }, [currentTimer, sessionCount, breakCount, isPlaying]);\n\n    useEffect(() => {\n        const returningCallback = () => {\n            clearInterval(loop.current);\n        };\n        // if clicked reset button\n        if (clickReset === true) {\n            // pause timing\n            clearInterval(loop.current);\n            // reset the timer settings\n\n            updateClickReset(!clickReset);\n            return returningCallback;\n        }\n    }, [clickReset, loop]);\n\n    const handlePlayPause = () => {\n        updateIsPlaying(!isPlaying);\n    };\n\n    const handleReset = () => {\n        // reset breakcount to 5, session count to 25\n        console.log(currentTimer);\n\n        //reset timer\n        updateTimeCount(\n            currentTimer === \"Session\"\n                ? 25 * secondsInAMinute\n                : 5 * secondsInAMinute\n        );\n        // pause music\n        musicPlayPause(\"reset\");\n        updateClickReset(!clickReset);\n        updateIsPlaying(false);\n        handleClearCount();\n    };\n\n    return (\n        <div className=\"clock-container\">\n            <h1 id=\"timer-label\">{currentTimer}</h1>\n            <span id=\"time-left\">{convertToTime(timeCount)}</span>\n            {/* <div>{Music()}</div> */}\n            <div className=\"controls\">\n                <button id=\"start_stop\" onClick={handlePlayPause}>\n                    <FontAwesomeIcon\n                        className=\"control-icon\"\n                        size=\"3x\"\n                        icon={isPlaying ? \"pause\" : \"play\"}\n                    />\n                </button>\n\n                <button id=\"reset\" onClick={handleReset}>\n                    <FontAwesomeIcon\n                        className=\"control-icon\"\n                        size=\"2x\"\n                        icon=\"sync-alt\"\n                    />\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Clock;\n","import React from \"react\";\n\nconst Music = (status) => {\n\t// let beep = new Audio(\n\t//     \"https://raw.githubusercontent.com/Yuhui-Shen/pomodoro_clock/master/src/static/bell.wav\"\n\t// );\n\n\t// const start = () => {\n\n\t//     // let beep = document.getElementById(\"audio\");\n\t//     // console.log(beep);\n\t//     // beep.play();\n\t// };\n\n\t// const reset = () => {\n\t//     console.log(\"pause\");\n\t//     beep.pause();\n\t//     beep.currentTime = 0;\n\t//     console.log(\"pause\");\n\t// };\n\treturn (\n\t\t<audio\n\t\t\tid=\"audio\"\n\t\t\tsrc=\"https://raw.githubusercontent.com/Yuhui-Shen/pomodoro_clock/master/src/static/bell.wav\"\n\t\t></audio>\n\t);\n};\n\nexport default Music;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"../static/Header.css\";\n\nconst Header = (props) => {\n    return (\n        <>\n            <nav>\n                <ul>\n                    <li>\n                        <Link to=\"/\">\n                            <div>\n                                <FontAwesomeIcon\n                                    icon=\"clock\"\n                                    size=\"2x\"\n                                />\n                                <br />\n                                Pomodoro Timer\n                            </div>\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/toDoList\">\n                            <div>\n                                <FontAwesomeIcon\n                                    icon=\"list-ul\"\n                                    size=\"2x\"\n                                />\n                                <br />\n                                To-Do List\n                            </div>\n                        </Link>\n                    </li>\n                </ul>\n            </nav>\n        </>\n    );\n};\n\nexport default Header;\n","import { nanoid } from \"nanoid\";\n\nexport const addTodo = (content) => ({\n    type: \"ADD_TODO\",\n    payload: {\n        id: nanoid(),\n        content,\n    },\n});\n\nexport const toggleTodo = (id) => ({\n    type: \"TOGGLE_TODO\",\n    payload: {\n        id,\n    },\n});\n\nexport const deleteTodo = (id) => ({\n    type: \"DELETE_TODO\",\n    payload: {\n        id,\n    },\n});\n\nexport const setFilter = (filter) => ({\n    type: \"SET_FILTER\",\n    payload: { filter },\n});\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../redux/actions.js\";\nimport \"../static/Form.css\";\n\nconst Form = ({ addTodo }) => {\n    // const {\n    //     updateInputText,\n    //     todos,\n    //     updateTodos,\n    //     updateStatus,\n    // } = props;\n    const getTodo = () => {\n        return document.getElementById(\"todo-input\").value;\n    };\n\n    // const inputTextHandler = (e) => {\n    //     e.preventDefault();\n    //     // get input text\n    //     let todo = getTodo();\n    //     // update input text to todos\n    //     updateInputText(todo);\n    //     updateTodos([\n    //         ...todos,\n    //         { text: todo, completed: false, id: todos.length },\n    //     ]);\n    //     // clear input field\n    //     updateInputText(\"\");\n    //     document.getElementById(\"todo-input\").value = \"\";\n    // };\n\n    const handleAddTodo = (e) => {\n        // stop refreshing the page\n        e.preventDefault();\n\n        let todo = getTodo();\n        // post with axios\n        // axios.post(\"https://jsonplaceholder.typicode.com/todos\", {\n        //     title: todo,\n        //     completed: false,\n        // }).then(res => addTodo(res.data));\n        // dispatch actions to add todo\n\n        // console.log(/^ *$/.test(todo));\n        // Only adds non-empty todos\n        if (!/^ *$/.test(todo)) {\n            addTodo(todo);\n            // Clear input field\n            document.getElementById(\"todo-input\").value = \"\";\n        }\n    };\n\n    return (\n        <form>\n            <input type=\"text\" id=\"todo-input\" autoFocus />\n            <button\n                className=\"todo-button\"\n                id=\"submit\"\n                type=\"submit\"\n                onClick={handleAddTodo}\n            >\n                {/* <FontAwesomeIcon icon=\"coffe\" /> */}\n                <FontAwesomeIcon\n                    icon={[\"fas\", \"plus-square\"]}\n                    // size=\"2x\"\n                />\n            </button>\n        </form>\n    );\n};\n\nexport default connect(null, { addTodo })(Form);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ToDoList from \"./ToDoList\";\nimport { setFilter } from \"../redux/actions\";\n\n// const statusHandler = (e) => {\n//     // console.log(e.target.value);\n//     updateStatus(e.target.value);\n// };\nconst statusHandler = (e, setFilter) => {\n    setFilter(e.target.value);\n};\nconst VisibilityFilters = ({ setFilter }) => {\n    return (\n        <div className=\"select\">\n            <select\n                name=\"todos\"\n                className=\"filter-todo\"\n                onChange={(event) => {\n                    statusHandler(event, setFilter);\n                }}\n            >\n                <option value=\"all\">All</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"uncompleted\">Uncompleted</option>\n            </select>\n        </div>\n    );\n};\n\n// const getVisibleTodos = (todos, filter) => {\n//     switch (filter) {\n//         case \"SHOW_COMPLETED\":\n//             return todos.filter((task) => task.completed);\n//         case \"SHOW_UNCOMPLETED\":\n//             return todos.filter((task) => !task.completed);\n//         case \"SHOW_ALL\":\n//         default:\n//             return todos;\n//     }\n// };\n\nconst mapStatetoProps = (state) => ({\n    // todos: getVisibleTodos(state.todos, state.visibilityFilter),\n    activeFilter: state.visibilityFilter,\n});\n\nexport default connect(mapStatetoProps, { setFilter })(\n    VisibilityFilters\n);\n","export const getTodosState = (store) => store.todos;\n\nexport const getTodoList = (store) =>\n    getTodosState(store) ? getTodosState(store).allIds : [];\n\nexport const getTodoById = (store, id) =>\n    getTodosState(store)\n        ? { ...getTodosState(store).byIds[id], id }\n        : {};\n\n/**\n * example of a slightly more complex selector\n * select from store combining information from multiple reducers\n */\nexport const getTodos = (store) =>\n    getTodoList(store).map((id) => getTodoById(store, id));\n\nexport const getTodosByVisibilityFilter = (\n    store,\n    visibilityFilter\n) => {\n    const allTodos = getTodos(store);\n    switch (visibilityFilter) {\n        case \"completed\":\n            return allTodos.filter((todo) => todo.completed);\n        case \"uncompleted\":\n            return allTodos.filter((todo) => !todo.completed);\n        case \"all\":\n        default:\n            return allTodos;\n    }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { toggleTodo, deleteTodo } from \"../redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"../static/Todo.css\";\n\nconst Todo = ({ todo, toggleTodo, deleteTodo }) => {\n    // const { text, updateTodos, todo, todos } = props;\n    // // Events\n    // const deleteHandler = () => {\n    //     updateTodos(todos.filter((el) => el.id !== todo.id));\n    //     // console.log(todo);\n    // };\n    // const completeHandler = () => {\n    //     updateTodos(\n    //         todos.map((item) => {\n    //             if (item.id === todo.id)\n    //                 return {\n    //                     ...item,\n    //                     completed: !item.completed,\n    //                 };\n    //             return item;\n    //         })\n    //     );\n    // };\n    // const completeHandler = (id, togggleTodo) => {\n    //     toggleTodo(id);\n    // };\n    return (\n        <>\n            <div\n                className={`Todo ${\n                    todo.completed ? \"completed\" : \"\"\n                }`}\n            >\n                <li\n                    className={`todo-item ${\n                        todo.completed ? \"completed\" : \"\"\n                    }`}\n                >\n                    {todo.content}\n                </li>\n                <button\n                    onClick={() => toggleTodo(todo.id)}\n                    className=\"complete-btn\"\n                >\n                    <FontAwesomeIcon icon=\"check\" />\n                </button>\n                <button\n                    onClick={() => deleteTodo(todo.id)}\n                    className=\"trash-btn\"\n                >\n                    <FontAwesomeIcon icon=\"trash\" />\n                </button>\n            </div>\n        </>\n    );\n};\nexport default connect(null, { toggleTodo, deleteTodo })(Todo);\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Form from \"./Form\";\nimport VisibilityFilters from \"./VisibilityFilters\";\nimport { getTodosByVisibilityFilter } from \"../redux/selectors\";\nimport { addTodo } from \"../redux/actions.js\";\n\nimport axios from \"axios\";\nimport Todo from \"./Todo\";\nimport \"../static/ToDoList.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n// import { faPlusSquare } from \"@fortawesome/free-regular-svg-icons\";\n\nconst ToDoList = ({ todos, addTodo }) => {\n    // Hooks\n    // const [inputText, updateInputText] = useState(\"\");\n    // const [todos, updateTodos] = useState([]);\n    // const [status, updateStatus] = useState(\"all\");\n    // const [filteredTodos, setFilteredTodos] = useState([]);\n\n    // run once when app starts\n    // useEffect(() => {\n    //     // getLocalTodos();\n    //     console.log(\"only runs once when app starts\");\n    // }, []);\n\n    // useEffect\n    // useEffect(() => {\n    //     const filterHandler = () => {\n    //         switch (status) {\n    //             case \"completed\":\n    //                 setFilteredTodos(\n    //                     todos.filter((todo) => todo.completed)\n    //                 );\n    //                 break;\n    //             case \"uncompleted\":\n    //                 setFilteredTodos(\n    //                     todos.filter((todo) => !todo.completed)\n    //                 );\n    //                 break;\n    //             default:\n    //                 setFilteredTodos(todos);\n    //         }\n    //     };\n\n    // Save todos to local\n    // const saveLocalTodos = () => {\n    //     localStorage.setItem(\"todos\", JSON.stringify(todos));\n    // };\n\n    //     filterHandler();\n    //     // saveLocalTodos();\n    // }, [todos, status]);\n    // Save to local\n\n    // const getLocalTodos = () => {\n    //     if (localStorage.getItem(\"todos\") === null) {\n    //         localStorage.setItem(\"todos\", JSON.stringify([]));\n    //     } else {\n    //         let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n    //         updateTodos(todoLocal);\n    //     }\n    // };\n    // console.log(todos);\n    // setup interceptor for axios\n    axios.interceptors.response.use(\n        (response) => {\n            // console.log(response.data);\n            response.data.forEach((todo) => {\n                todo.title = todo.title.substring(0, 23);\n            });\n\n            return response;\n        },\n        (error) => {\n            return Promise.reject(error);\n        }\n    );\n\n    // run once when app starts\n    useEffect(() => {\n        // getLocalTodos();\n\n        console.log(todos.length);\n        if (todos.length === 0) {\n            axios\n                .get(\n                    \"https://jsonplaceholder.typicode.com/todos?_limit=3\"\n                )\n                .then((res) =>\n                    res.data.forEach((todo) => {\n                        addTodo(todo.title);\n                        // console.log(todo.title);\n                    })\n                );\n        }\n    }, []);\n    return (\n        <div className=\"Todo-List-Main\">\n            <h1>To-Do List</h1>\n            <div className=\"input-container\">\n                <Form />\n                <VisibilityFilters />\n                <div id=\"select-down\">\n                    <FontAwesomeIcon icon=\"chevron-down\" />\n                </div>\n            </div>\n\n            <div className=\"todo-container\">\n                <ul className=\"todo-list\">\n                    {todos.map((todo) => (\n                        <Todo\n                            text={todo.content}\n                            key={todo.id}\n                            todo={todo}\n                        />\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    const { visibilityFilter } = state;\n    const todos = getTodosByVisibilityFilter(state, visibilityFilter);\n    // Destructure\n    // const { todos, visibilityFilter } = state;\n    // console.log(todos);\n    return { todos };\n};\n\nexport default connect(mapStateToProps, { addTodo })(ToDoList);\n","import React, { useState } from \"react\";\n\n// import { connect } from \"react-redux\";\n\nimport Counter from \"./components/Counter\";\nimport Clock from \"./components/Clock\";\nimport Music from \"./components/Music\";\nimport Header from \"./components/Header\";\nimport ToDoList from \"./components/ToDoList\";\n\nimport \"./App.css\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n    faMinus,\n    faPlus,\n    faPlay,\n    faPause,\n    faSyncAlt,\n    faCheck,\n    faTrash,\n    faClock,\n    faListUl,\n    faPlusSquare,\n    faChevronDown,\n} from \"@fortawesome/free-solid-svg-icons\";\n// import { faPlusSquare } from \"@fortawesome/free-regular-svg-icons\";\nlibrary.add(\n    faMinus,\n    faPlus,\n    faPlay,\n    faPause,\n    faSyncAlt,\n    faPlusSquare,\n    faCheck,\n    faTrash,\n    faClock,\n    faListUl,\n    faChevronDown\n);\n\nfunction App() {\n    // state init\n    const [breakCount, updateBreakCount] = useState(5);\n    const [sessionCount, updateSessionCount] = useState(25);\n\n    // const [clockCount, updateClockCount] = useState(25 * 60);\n    const [currentTimer] = useState(\"Session\");\n    const handleClearCount = () => {\n        updateBreakCount(5);\n        updateSessionCount(25);\n    };\n\n    const handleClick = (e) => {\n        // extract component name and button name from e: e.g.: break + plus\n\n        let update = e.target.getAttribute(\"updatecount\");\n        let title = e.target.getAttribute(\"title\");\n\n        // update breakCount or sessionCount accordingly\n        let operand = update === \"plus\" ? 1 : -1;\n        // breakCount or sessionCount cannot be below 0 or above 60\n        if (\n            (title === \"Break Length\" &&\n                (breakCount + operand === 0 ||\n                    breakCount + operand === 61)) ||\n            (title === \"Session Length\" &&\n                (sessionCount + operand === 0 ||\n                    sessionCount + operand === 61))\n        )\n            return;\n\n        title === \"Break Length\"\n            ? updateBreakCount(breakCount + operand)\n            : updateSessionCount(sessionCount + operand);\n    };\n\n    const breakProps = {\n        title: \"Break Length\",\n        time: breakCount,\n        onClick: handleClick,\n    };\n    const sessionProps = {\n        title: \"Session Length\",\n        time: sessionCount,\n        onClick: handleClick,\n    };\n    const clockProps = {\n        time: \"\",\n        currentSession: currentTimer,\n        isPlaying: false,\n        breakCount: breakCount,\n        sessionCount: sessionCount,\n        onClearCount: handleClearCount,\n        // loop: undefined,\n    };\n\n    return (\n        <Router>\n            <div>\n                <Switch>\n                    <Route path=\"/toDoList\">\n                        <Header />\n                        {/* {ToDoList()} */}\n                        <ToDoList className=\"ToDoList\" />\n                    </Route>\n\n                    <Route path=\"/\">\n                        <Header />\n\n                        <div className=\"App\">\n                            <body>\n                                <div className=\"Counters\">\n                                    <h2>Pomodoro Timer</h2>\n                                    <div id=\"break-label\">\n                                        {Counter({ ...breakProps })}\n                                    </div>\n                                    <div id=\"session-label\">\n                                        {Counter({ ...sessionProps })}\n                                    </div>\n                                </div>\n                                <div className=\"Clock\">\n                                    {Clock({ ...clockProps })}\n                                </div>\n                            </body>\n\n                            {/* {Music()} */}\n                            <Music />\n\n                            {/* <footer>Designed by meeeee</footer> */}\n                        </div>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Store\n\n// Action\n\n// Reducer\n\n// Dispatch\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}